import tkinter
import random  

ROWS = 25
COLS = 25
TILE_SIZE = 25

WINDOW_WIDTH = TILE_SIZE * COLS
WINDOW_HEIGHT = TILE_SIZE * ROWS

class Tile:
    def __init__(self, x, y):
        self.x = x
        self.y = y

high_score = 0  # Initialize high score
score = 0  # Initialize score

def reset_game():
    global snake, food, snake_body, game_over, score, velocityX, velocityY, attempts
    global high_score  # Declare high_score as global

    if score > high_score:  # Check if the current score is higher than the high score
        high_score = score  # Update high score if needed

    snake = Tile(random.randint(0, COLS - 1) * TILE_SIZE, random.randint(0, ROWS - 1) * TILE_SIZE) # Random pos. for snake
    food = Tile(random.randint(0, COLS - 1) * TILE_SIZE, random.randint(0, ROWS - 1) * TILE_SIZE)  # Random pos. for first food
    velocityX = 0
    velocityY = 0
    snake_body = []
    game_over = False
    score = 0
    attempts += 1  # Increment attempts when game is reset

def change_direction(e):
    global velocityX, velocityY, game_over
    if game_over:
        if e.keysym == "Return":  # Check if Enter key is pressed
            reset_game()
            draw()
            return
    if game_over:
        return

    if e.keysym == "w" and velocityY != 1:
        velocityX = 0
        velocityY = -1
    elif e.keysym == "s" and velocityY != -1:
        velocityX = 0
        velocityY = 1
    elif e.keysym == "a" and velocityX != 1:
        velocityX = -1
        velocityY = 0
    elif e.keysym == "d" and velocityX != -1:
        velocityX = 1
        velocityY = 0

def move():
    global snake, food, snake_body, game_over, score
    if game_over:
        return
    
    if snake.x < 0 or snake.x >= WINDOW_WIDTH or snake.y < 0 or snake.y >= WINDOW_HEIGHT:
        game_over = True
        return
    
    for tile in snake_body:
        if snake.x == tile.x and snake.y == tile.y:
            game_over = True
            return
    
    if snake.x == food.x and snake.y == food.y:  # Collision
        snake_body.append(Tile(food.x, food.y))
        food.x = random.randint(0, COLS - 1) * TILE_SIZE
        food.y = random.randint(0, ROWS - 1) * TILE_SIZE
        score += 1
        if score == 30:
            game_over = True
            return

    for i in range(len(snake_body) - 1, -1, -1):
        tile = snake_body[i]
        if i == 0:
            tile.x = snake.x
            tile.y = snake.y
        else:
            prev_tile = snake_body[i - 1]
            tile.x = prev_tile.x
            tile.y = prev_tile.y
    
    snake.x += velocityX * TILE_SIZE
    snake.y += velocityY * TILE_SIZE

def draw():
    global snake, food, snake_body, game_over, score, high_score, attempts
    move()

    canvas.delete("all")

    if not game_over:  # Draw food only if game is not over
        canvas.create_rectangle(food.x, food.y, food.x + TILE_SIZE, food.y + TILE_SIZE, fill='red')

        canvas.create_rectangle(snake.x, snake.y, snake.x + TILE_SIZE, snake.y + TILE_SIZE, fill='lime green')

        for tile in snake_body:
            canvas.create_rectangle(tile.x, tile.y, tile.x + TILE_SIZE, tile.y + TILE_SIZE, fill='lime green')

    if game_over:
        if score == 30:
            canvas.create_text(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2 - 15, font="Arial 20", text="You Win!", fill="white")
        else:
            canvas.create_text(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2 - 15, font="Arial 20", text="Game Over", fill="white")
            canvas.create_text(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2 + 10, font="Arial 20", text=f"Score: {score}", fill="white")
        canvas.create_text(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2 + 40, font="Arial 12", text="Press Enter to Play Again", fill="white")
    else:
        canvas.create_text(30, 20, font="Arial 10", text=f"Score: {score}", fill="white")
        canvas.create_text(40, 35, font="Arial 10", text=f"Attempts: {attempts}", fill="white")
        canvas.create_text(45, 50, font="Arial 10", text=f"High Score: {high_score}", fill="white")

# Game window setup
window = tkinter.Tk()
window.title("SN4K3")
window.resizable(False, False)

canvas = tkinter.Canvas(window, bg="black", width=WINDOW_WIDTH, height=WINDOW_HEIGHT, borderwidth=0, highlightthickness=0)
canvas.pack()
window.update()

# Center the window
window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

window_x = int((screen_width / 2) - (window_width / 2))
window_y = int((screen_height / 2) - (window_height / 2))

window.geometry(f"{window_width}x{window_height}+{window_x}+{window_y}")

# Initialize game
attempts = 0  # Initialize attempts
reset_game()

# Game loop
def game_loop():
    draw()
    window.bind("<KeyRelease>", change_direction)
    window.after(100, game_loop)

game_loop()
window.mainloop()

#"SN4K3" by yrll0w
